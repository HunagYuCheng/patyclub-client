{"version":3,"sources":["webpack:///./src/views/ActivityView.vue","webpack:///./src/components/ActivityViewPage/CardList.vue","webpack:///./src/components/ActivityViewPage/CardList.vue?749c","webpack:///./src/components/ActivityViewPage/CardList.vue?82e4","webpack:///./src/components/ActivityViewPage/EventCategory.vue","webpack:///./src/components/ActivityViewPage/EventCategory.vue?4129","webpack:///./src/components/ActivityViewPage/EventCategory.vue?c8ac","webpack:///./src/components/ActivityViewPage/ActivityFilter.vue","webpack:///./src/components/ActivityViewPage/ActivityFilter.vue?cf7a","webpack:///./src/components/ActivityViewPage/ActivityFilter.vue?a8b7","webpack:///./src/views/ActivityView.vue?59bb","webpack:///./src/views/ActivityView.vue?7e95"],"names":["id","class","sortCondition","sortConditionModel","stringOptions","setSortCondition","setDefaultAllCondition","setArticles","handleSearchWord","deleteSearchWord","categoryList","key","selectedCategory","setselectedCategory","allEvent","length","page","color","min","max","maxPages","input","Activity","data","idx","showInfo","clickCard","name","e","clickFavorite","src","image","eventTitle","owner","timeDiffCalc","Date","eventEdDate","eventIntroduction","props","setup","store","$q","dateFuture","dateNow","diffInMilliSeconds","Math","abs","getTime","days","floor","hours","minutes","difference","returnSVG","loginCheck","eventID","token","getters","getUserStore","sToken","notify","textColor","icon","message","eventId","then","catch","stopPropagation","console","log","render","QCard","QIcon","QCardSection","Ripple","nodes","CategoryNode","selected","GetNodeID","node-key","text-color","no-connectors","emit","processCategoryNode","NodeItem","tempNode","cateId","label","cateName","children","childNode","undefined","forEach","item","push","ID","newVal","oldVal","value","QTree","size","clickAll","clickArticles","searchWords","submit","borderless","append","stringOption","val","index","dense","deleteValue","sortConditionSelect","changeSortCondition","options","sortConditionFromProp","options-dense","emits","model","refKey","components","QBtn","QInput","QChip","QSelect","defaultCondition","requestPageNum","category","tag","queryList","nonCompleteEvent","sortBy","eventPersonnel","allCondition","JSON","parse","stringify","getEventWithCondition","splice","rownumPerPage","response","currentPageNum","maxPageNum","getEventTree","newID","sortString","tempSortString","CardList","EventCategory","ActivityFilter","QPagination"],"mappings":"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","file":"js/chunk-2d0be6cc.236f8642.js","sourcesContent":["<template>\n    <main id=\"ActivityView\">\n        <div class=\"container\">\n            <div class=\"activity-main\">\n                <div class=\"head-block\"></div>\n                <div class=\"activity-filter\">\n                    <activity-filter\n                        :sortCondition=\"sortCondition\"\n                        :sortConditionModel=\"sortConditionModel\"\n                        :stringOptions=\"stringOptions\"\n                        @setSortCondition=\"setSortCondition\"\n                        @setDefaultAllCondition=\"setDefaultAllCondition\"\n                        @setArticles=\"setArticles\"\n                        @handleSearchWord=\"handleSearchWord\"\n                        @deleteSearchWord=\"deleteSearchWord\"\n                    />\n                </div>\n                <div class=\"activity-information\">\n                    <div class=\"event-category scrollbarCol\">\n                        <event-category\n                            :categoryList=\"categoryList\"\n                            :key=\"categoryList\"\n                            :selectedCategory=\"selectedCategory\"\n                            @setselectedcategory=\"setselectedCategory\"\n                        />\n                    </div>\n                    <div class=\"card-set\" :key=\"allEvent\">\n                        <div v-if=\"allEvent.length === 0\">\n                            尚無活動\n                        </div>\n                        <div class=\"card-list scrollbarCol\" v-else>\n                            <card-list :allEvent=\"allEvent\" />\n                        </div>\n                        <div>\n                            <q-pagination\n                                class=\"pagination\"\n                                v-model=\"page\"\n                                color=\"orange-12\"\n                                :min=\"1\"\n                                :max=\"maxPages\"\n                                :input=\"true\"\n                            />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </main>\n</template>\n\n<script lang=\"ts\">\nimport CardList from \"../components/ActivityViewPage/CardList.vue\";\nimport EventCategory from \"../components/ActivityViewPage/EventCategory.vue\";\nimport ActivityFilter from \"../components/ActivityViewPage/ActivityFilter.vue\";\nimport { apiGetEventWithCondition, apiGetEventCategory } from \"../apis/api/userRequest\";\nimport { categoryNode, EventType, GetEventWithCondition } from \"../apis/type\";\nimport { ref, onMounted, Ref, watch } from \"vue\";\n\nexport default {\n    setup() {\n        const sortCondition: string[] = [\n            \"依活動開始時間升序\",\n            \"依活動開始時間降序\",\n            \"依參與人數升序\",\n            \"依參與人數降序\",\n        ];\n        const defaultCondition: GetEventWithCondition = {\n            requestPageNum: 1,\n            category: 0,\n            tag: \"\",\n            queryList: [],\n            nonCompleteEvent: \"No\",\n            sortBy: \"non_sort\",\n            eventPersonnel: \"\",\n        };\n        const allCondition: Ref<GetEventWithCondition> = ref(JSON.parse(JSON.stringify(defaultCondition)));\n\n        const sortConditionModel = ref(sortCondition[0]);\n        const options: string[] = [\"Google\", \"Facebook\", \"Twitter\", \"Apple\", \"Oracle\"];\n        const page: Ref<number> = ref(1);\n        const maxPages: Ref<number> = ref(1);\n\n        const allEvent: Ref<EventType[]> = ref([]);\n        const categoryList: Ref<categoryNode[]> = ref([]);\n        const selectedCategory: Ref<number> = ref(-1);\n\n        const stringOptions: Ref<string[]> = ref([]);\n\n        const handleSearchWord = (refKey: string) => {\n            console.log(refKey);\n            stringOptions.value.push(refKey);\n            allCondition.value.queryList = stringOptions.value;\n            getEventWithCondition();\n        };\n\n        const deleteSearchWord = (index: number) => {\n            stringOptions.value.splice(index, 1);\n            allCondition.value.queryList = stringOptions.value;\n            getEventWithCondition();\n        };\n\n        const getEventWithCondition = () => {\n            apiGetEventWithCondition({\n                category: allCondition.value.category,\n                tag: allCondition.value.tag,\n                queryList: allCondition.value.queryList,\n                sortBy: allCondition.value.sortBy,\n                rownumPerPage: 8,\n                requestPageNum: page.value,\n            }).then((response: any) => {\n                allEvent.value = response.data;\n                page.value = response.currentPageNum;\n                maxPages.value = response.maxPageNum;\n            });\n        };\n\n        const setDefaultAllCondition = () => {\n            allCondition.value.category = 0;\n            allCondition.value.tag = \"\";\n            selectedCategory.value = 0;\n            getEventWithCondition();\n        };\n\n        const getEventTree = () => {\n            apiGetEventCategory().then((response: any) => {\n                categoryList.value = response.data;\n            });\n        };\n\n        const setselectedCategory = (newID: number) => {\n            console.log(\"---click All----\");\n            allCondition.value.category = newID;\n            selectedCategory.value = newID;\n            getEventWithCondition();\n        };\n\n        const setArticles = () => {\n            allCondition.value.tag = \"S\";\n            getEventWithCondition();\n        };\n\n        const setSortCondition = (sortString: string) => {\n            let tempSortString = \"\";\n            switch (sortString) {\n                case \"依活動開始時間升序\":\n                    tempSortString = \"eventStDate_asc\";\n                    break;\n                case \"依活動開始時間降序\":\n                    tempSortString = \"eventStDate_desc\";\n                    break;\n                case \"依參與人數升序\":\n                    tempSortString = \"hot_asc\";\n                    break;\n                case \"依參與人數降序\":\n                    tempSortString = \"hot_desc\";\n                    break;\n                default:\n                    tempSortString = \"\";\n                    break;\n            }\n            allCondition.value.sortBy = tempSortString;\n            sortConditionModel.value = sortString;\n            getEventWithCondition();\n        };\n\n        watch(selectedCategory, (newVal, oldVal) => {\n            console.log(\"selected-watchsssssss\", newVal, oldVal);\n        });\n\n        watch(sortConditionModel, (newVal) => {\n            console.log(\"sortConditionModel-watchsssssss\", newVal);\n        });\n        watch(allCondition, (newVal) => {\n            console.log(\"allCondition-watchsssssss\", newVal);\n        });\n\n        watch(page, () => {\n            getEventWithCondition();\n        });\n\n        onMounted(() => {\n            getEventTree();\n            allCondition.value.sortBy = \"eventStDate_asc\";\n            getEventWithCondition();\n        });\n\n        return {\n            options,\n            page: page,\n            maxPages,\n            allEvent,\n            categoryList,\n            selectedCategory,\n            sortCondition,\n            sortConditionModel,\n            stringOptions,\n            setselectedCategory,\n            setSortCondition,\n            setDefaultAllCondition,\n            setArticles,\n            handleSearchWord,\n            deleteSearchWord,\n        };\n    },\n\n    components: {\n        CardList,\n        EventCategory,\n        ActivityFilter,\n    },\n};\n</script>\n","<template>\n    <q-card\n        v-ripple\n        class=\"my-card cursor-pointer \"\n        v-for=\"(data, idx) in Activity\"\n        :key=\"idx\"\n        @mouseover=\"data.showInfo = true\"\n        @mouseleave=\"data.showInfo = false\"\n        @click=\"clickCard\"\n    >\n        <q-icon name=\"favorite\" class=\"unfavorite\" @click=\"(e) => clickFavorite(e, data.id)\" />\n        <img :src=\"data.image\" />\n        <q-card-section>\n            <div class=\"text-h6\">{{ data.eventTitle }}</div>\n            <div class=\"text-subtitle2\">{{ data.owner !== \"\" ? `by ${data.owner}` : \"\" }}</div>\n        </q-card-section>\n        <div class=\"timeline\">\n            <span>{{ timeDiffCalc(new Date(data.eventEdDate)) }}</span>\n        </div>\n\n        <div class=\"q-pt-none\" v-if=\"data.showInfo\">\n            <div class=\"text-h6 card-title scrollbarCol\">{{ data.eventTitle }}</div>\n            <div class=\"hover-content scrollbarCol\">\n                <span>{{ data.eventIntroduction }}</span>\n                <div class=\"text-subtitle2\">{{ data.owner !== \"\" ? `by ${data.owner}` : \"\" }}</div>\n            </div>\n\n            <div class=\"timeline\">\n                <span>{{ timeDiffCalc(new Date(data.eventEdDate)) }}</span>\n            </div>\n        </div>\n    </q-card>\n</template>\n\n<script lang=\"ts\">\nimport { toRef } from \"vue\";\nimport { useStore } from \"vuex\";\nimport { useQuasar } from \"quasar\";\nimport { apiPutWatchEvent } from \"@/apis/api/userRequest\";\n\nexport default {\n    name: \"CardList\",\n    props: [\"allEvent\"],\n    setup(props: any) {\n        const Activity = toRef(props, \"allEvent\");\n        const store = useStore();\n        const $q = useQuasar();\n\n        //計算時間差距\n        function timeDiffCalc(dateFuture: Date) {\n            let dateNow = new Date();\n            let diffInMilliSeconds: number = Math.abs(dateFuture.getTime() - dateNow.getTime()) / 1000;\n            // calculate days\n            const days = Math.floor(diffInMilliSeconds / 86400);\n            diffInMilliSeconds -= days * 86400;\n            // calculate hours\n            const hours = Math.floor(diffInMilliSeconds / 3600) % 24;\n            diffInMilliSeconds -= hours * 3600;\n            // calculate minutes\n            const minutes = Math.floor(diffInMilliSeconds / 60) % 60;\n            diffInMilliSeconds -= minutes * 60;\n            let difference = \"\";\n            if (days > 0) {\n                difference += days === 1 ? `${days} day ` : `${days} days `;\n            }\n            difference += hours === 0 || hours === 1 ? `${hours} hour ` : `${hours} hours `;\n            difference += minutes === 0 || hours === 1 ? `${minutes} minutes` : `${minutes} minutes`;\n            return difference;\n        }\n\n        const returnSVG = () => {\n            return \"img:\" + require(`@/assets/icon/heartSolid.svg`);\n        };\n\n        const loginCheck = (eventID: number) => {\n            let token = store.getters.getUserStore.sToken;\n            if (token === \"\") {\n                $q.notify({\n                    color: \"red-5\",\n                    textColor: \"white\",\n                    icon: \"warning\",\n                    message: \"請先登入!\",\n                });\n            } else {\n                apiPutWatchEvent({\n                    token: token,\n                    eventId: eventID,\n                })\n                    .then(() => {\n                        $q.notify({\n                            icon: \"done\",\n                            color: \"positive\",\n                            message: \"加入成功\",\n                        });\n                    })\n                    .catch(() => {\n                        $q.notify({\n                            color: \"red-5\",\n                            textColor: \"white\",\n                            icon: \"warning\",\n                            message: \"新增失敗!\",\n                        });\n                    });\n            }\n        };\n\n        const clickFavorite = (e: any, eventID: number) => {\n            e.stopPropagation();\n            loginCheck(eventID);\n        };\n\n        const clickCard = () => {\n            console.log(\"---clickCard---\");\n        };\n\n        return {\n            Activity,\n            timeDiffCalc,\n            returnSVG,\n            clickFavorite,\n            clickCard,\n        };\n    },\n};\n</script>\n","\nimport { toRef } from \"vue\";\nimport { useStore } from \"vuex\";\nimport useQuasar from 'quasar/src/composables/use-quasar.js';;\nimport { apiPutWatchEvent } from \"@/apis/api/userRequest\";\n\nexport default {\n    name: \"CardList\",\n    props: [\"allEvent\"],\n    setup(props: any) {\n        const Activity = toRef(props, \"allEvent\");\n        const store = useStore();\n        const $q = useQuasar();\n\n        //計算時間差距\n        function timeDiffCalc(dateFuture: Date) {\n            let dateNow = new Date();\n            let diffInMilliSeconds: number = Math.abs(dateFuture.getTime() - dateNow.getTime()) / 1000;\n            // calculate days\n            const days = Math.floor(diffInMilliSeconds / 86400);\n            diffInMilliSeconds -= days * 86400;\n            // calculate hours\n            const hours = Math.floor(diffInMilliSeconds / 3600) % 24;\n            diffInMilliSeconds -= hours * 3600;\n            // calculate minutes\n            const minutes = Math.floor(diffInMilliSeconds / 60) % 60;\n            diffInMilliSeconds -= minutes * 60;\n            let difference = \"\";\n            if (days > 0) {\n                difference += days === 1 ? `${days} day ` : `${days} days `;\n            }\n            difference += hours === 0 || hours === 1 ? `${hours} hour ` : `${hours} hours `;\n            difference += minutes === 0 || hours === 1 ? `${minutes} minutes` : `${minutes} minutes`;\n            return difference;\n        }\n\n        const returnSVG = () => {\n            return \"img:\" + require(`@/assets/icon/heartSolid.svg`);\n        };\n\n        const loginCheck = (eventID: number) => {\n            let token = store.getters.getUserStore.sToken;\n            if (token === \"\") {\n                $q.notify({\n                    color: \"red-5\",\n                    textColor: \"white\",\n                    icon: \"warning\",\n                    message: \"請先登入!\",\n                });\n            } else {\n                apiPutWatchEvent({\n                    token: token,\n                    eventId: eventID,\n                })\n                    .then(() => {\n                        $q.notify({\n                            icon: \"done\",\n                            color: \"positive\",\n                            message: \"加入成功\",\n                        });\n                    })\n                    .catch(() => {\n                        $q.notify({\n                            color: \"red-5\",\n                            textColor: \"white\",\n                            icon: \"warning\",\n                            message: \"新增失敗!\",\n                        });\n                    });\n            }\n        };\n\n        const clickFavorite = (e: any, eventID: number) => {\n            e.stopPropagation();\n            loginCheck(eventID);\n        };\n\n        const clickCard = () => {\n            console.log(\"---clickCard---\");\n        };\n\n        return {\n            Activity,\n            timeDiffCalc,\n            returnSVG,\n            clickFavorite,\n            clickCard,\n        };\n    },\n};\n","import { render } from \"./CardList.vue?vue&type=template&id=3e69f842\"\nimport script from \"./CardList.vue?vue&type=script&lang=ts\"\nexport * from \"./CardList.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script\nimport QCard from 'quasar/src/components/card/QCard.js';\nimport QIcon from 'quasar/src/components/icon/QIcon.js';\nimport QCardSection from 'quasar/src/components/card/QCardSection.js';import Ripple from 'quasar/src/directives/Ripple.js';\nimport qInstall from \"../../../node_modules/vue-cli-plugin-quasar/lib/runtime.auto-import.js\";\nqInstall(script, 'components', {QCard,QIcon,QCardSection});qInstall(script, 'directives', {Ripple});\n","<template>\n  <div class=\"q-pa-md q-gutter-sm\">\n    <q-tree\n      :nodes=\"CategoryNode\"\n      v-model:selected=\"selected\"\n      node-key=\"id\"\n      color=\"red\"\n      text-color=\"#402e32\"\n      no-connectors\n      @update:selected=\"GetNodeID\"\n    />\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { toRef, ref, onMounted, watch } from \"vue\";\nimport { categoryNode, QuasartreeNode } from \"../../apis/type\";\nexport default {\n  props: [\"categoryList\", \"selectedCategory\"],\n  setup(props: any, { emit }: any) {\n    const categoryList = toRef(props, \"categoryList\");\n    const CategoryNode = ref<QuasartreeNode[]>([]);\n    const selected = toRef(props, \"selectedCategory\");\n\n    const processCategoryNode = (NodeItem: categoryNode) => {\n      let tempNode: QuasartreeNode = {\n        id: NodeItem.cateId,\n        label: NodeItem.cateName,\n        children: [],\n      };\n      if (\n        NodeItem.childNode?.length !== 0 &&\n        NodeItem.childNode !== undefined\n      ) {\n        NodeItem.childNode.forEach((item: categoryNode) => {\n          tempNode.children.push(processCategoryNode(item));\n        });\n      }\n      return tempNode;\n    };\n\n    const GetNodeID = (ID: any) => {\n      emit(\"setselectedcategory\", ID);\n    };\n\n    watch(selected, (newVal, oldVal) => {\n      console.log(\"selected-watchsssssss\", newVal, oldVal);\n    });\n\n    onMounted(() => {\n      if (categoryList.value.length !== 0)\n        CategoryNode.value = processCategoryNode(categoryList.value).children;\n    });\n\n    return {\n      CategoryNode,\n      selected,\n      GetNodeID,\n    };\n  },\n};\n</script>\n","\nimport { toRef, ref, onMounted, watch } from \"vue\";\nimport { categoryNode, QuasartreeNode } from \"../../apis/type\";\nexport default {\n  props: [\"categoryList\", \"selectedCategory\"],\n  setup(props: any, { emit }: any) {\n    const categoryList = toRef(props, \"categoryList\");\n    const CategoryNode = ref<QuasartreeNode[]>([]);\n    const selected = toRef(props, \"selectedCategory\");\n\n    const processCategoryNode = (NodeItem: categoryNode) => {\n      let tempNode: QuasartreeNode = {\n        id: NodeItem.cateId,\n        label: NodeItem.cateName,\n        children: [],\n      };\n      if (\n        NodeItem.childNode?.length !== 0 &&\n        NodeItem.childNode !== undefined\n      ) {\n        NodeItem.childNode.forEach((item: categoryNode) => {\n          tempNode.children.push(processCategoryNode(item));\n        });\n      }\n      return tempNode;\n    };\n\n    const GetNodeID = (ID: any) => {\n      emit(\"setselectedcategory\", ID);\n    };\n\n    watch(selected, (newVal, oldVal) => {\n      console.log(\"selected-watchsssssss\", newVal, oldVal);\n    });\n\n    onMounted(() => {\n      if (categoryList.value.length !== 0)\n        CategoryNode.value = processCategoryNode(categoryList.value).children;\n    });\n\n    return {\n      CategoryNode,\n      selected,\n      GetNodeID,\n    };\n  },\n};\n","import { render } from \"./EventCategory.vue?vue&type=template&id=3e1ddf20\"\nimport script from \"./EventCategory.vue?vue&type=script&lang=ts\"\nexport * from \"./EventCategory.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script\nimport QTree from 'quasar/src/components/tree/QTree.js';\nimport qInstall from \"../../../node_modules/vue-cli-plugin-quasar/lib/runtime.auto-import.js\";\nqInstall(script, 'components', {QTree});\n","<template>\n    <div class=\"left-search\">\n        <div class=\"right-btn\">\n            <q-btn class=\"activity-all\" label=\"全部\" size=\"md\" @click=\"clickAll()\" />\n            <q-btn class=\"activity-recommended\" label=\"精選\" size=\"md\" @click=\"clickArticles()\" />\n        </div>\n        <div class=\"search-input\">\n            <q-input class=\"search-textfield\" v-model=\"searchWords\" @keydown.enter=\"submit(searchWords)\" borderless>\n                <template v-slot:append>\n                    <q-icon name=\"search\" @click=\"submit(searchWords)\" class=\"cursor-pointer\" />\n                </template>\n            </q-input>\n            <div class=\"search-words\">\n                <span v-for=\"(val, index) in stringOption\" :key=\"val\">\n                    <q-chip dense size=\"md\" color=\"#eeb888\"\n                        >{{ val }}\n                        <q-icon name=\"close\" @click=\"deleteValue(index)\" class=\"cursor-pointer\" />\n                    </q-chip>\n                </span>\n            </div>\n        </div>\n    </div>\n    <div class=\"right-search\">\n        <div>\n            <label>排序</label>\n            <q-select\n                class=\"select-category\"\n                v-model=\"sortConditionSelect\"\n                :options=\"sortConditionFromProp\"\n                @update:model-value=\"(val) => changeSortCondition(val)\"\n                borderless\n                dense\n                options-dense\n            />\n        </div>\n    </div>\n</template>\n\n<script lang=\"ts\">\nimport { ref, toRef } from \"vue\";\n\nexport default {\n    props: [\"sortCondition\", \"sortConditionModel\", \"stringOptions\"],\n    emits: [\"setSortCondition\", \"setDefaultAllCondition\", \"setArticles\", \"handleSearchWord\", \"deleteSearchWord\"],\n    setup(props: any, { emit }: any) {\n        const sortConditionFromProp = toRef(props, \"sortCondition\");\n        const sortConditionSelect = toRef(props, \"sortConditionModel\");\n        const options = [\"Google\", \"Facebook\", \"Twitter\", \"Apple\", \"Oracle\"];\n        const model = ref(options[0]);\n        const stringOption = toRef(props, \"stringOptions\");\n        const searchWords = ref(null);\n\n        const submit = (refKey: string) => {\n            console.log(refKey);\n            emit(\"handleSearchWord\", refKey);\n            searchWords.value = null;\n        };\n\n        const deleteValue = (index: number) => {\n            emit(\"deleteSearchWord\", index);\n        };\n\n        const changeSortCondition = (val: string) => {\n            emit(\"setSortCondition\", val);\n        };\n\n        const clickAll = () => {\n            emit(\"setDefaultAllCondition\");\n        };\n\n        const clickArticles = () => {\n            emit(\"setArticles\");\n        };\n\n        return {\n            options,\n            model,\n            sortConditionFromProp,\n            sortConditionSelect,\n            stringOption,\n            searchWords,\n            deleteValue,\n            submit,\n            changeSortCondition,\n            clickAll,\n            clickArticles,\n        };\n    },\n    components: {},\n};\n</script>\n","\nimport { ref, toRef } from \"vue\";\n\nexport default {\n    props: [\"sortCondition\", \"sortConditionModel\", \"stringOptions\"],\n    emits: [\"setSortCondition\", \"setDefaultAllCondition\", \"setArticles\", \"handleSearchWord\", \"deleteSearchWord\"],\n    setup(props: any, { emit }: any) {\n        const sortConditionFromProp = toRef(props, \"sortCondition\");\n        const sortConditionSelect = toRef(props, \"sortConditionModel\");\n        const options = [\"Google\", \"Facebook\", \"Twitter\", \"Apple\", \"Oracle\"];\n        const model = ref(options[0]);\n        const stringOption = toRef(props, \"stringOptions\");\n        const searchWords = ref(null);\n\n        const submit = (refKey: string) => {\n            console.log(refKey);\n            emit(\"handleSearchWord\", refKey);\n            searchWords.value = null;\n        };\n\n        const deleteValue = (index: number) => {\n            emit(\"deleteSearchWord\", index);\n        };\n\n        const changeSortCondition = (val: string) => {\n            emit(\"setSortCondition\", val);\n        };\n\n        const clickAll = () => {\n            emit(\"setDefaultAllCondition\");\n        };\n\n        const clickArticles = () => {\n            emit(\"setArticles\");\n        };\n\n        return {\n            options,\n            model,\n            sortConditionFromProp,\n            sortConditionSelect,\n            stringOption,\n            searchWords,\n            deleteValue,\n            submit,\n            changeSortCondition,\n            clickAll,\n            clickArticles,\n        };\n    },\n    components: {},\n};\n","import { render } from \"./ActivityFilter.vue?vue&type=template&id=389732af\"\nimport script from \"./ActivityFilter.vue?vue&type=script&lang=ts\"\nexport * from \"./ActivityFilter.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script\nimport QBtn from 'quasar/src/components/btn/QBtn.js';\nimport QInput from 'quasar/src/components/input/QInput.js';\nimport QIcon from 'quasar/src/components/icon/QIcon.js';\nimport QChip from 'quasar/src/components/chip/QChip.js';\nimport QSelect from 'quasar/src/components/select/QSelect.js';\nimport qInstall from \"../../../node_modules/vue-cli-plugin-quasar/lib/runtime.auto-import.js\";\nqInstall(script, 'components', {QBtn,QInput,QIcon,QChip,QSelect});\n","\nimport CardList from \"../components/ActivityViewPage/CardList.vue\";\nimport EventCategory from \"../components/ActivityViewPage/EventCategory.vue\";\nimport ActivityFilter from \"../components/ActivityViewPage/ActivityFilter.vue\";\nimport { apiGetEventWithCondition, apiGetEventCategory } from \"../apis/api/userRequest\";\nimport { categoryNode, EventType, GetEventWithCondition } from \"../apis/type\";\nimport { ref, onMounted, Ref, watch } from \"vue\";\n\nexport default {\n    setup() {\n        const sortCondition: string[] = [\n            \"依活動開始時間升序\",\n            \"依活動開始時間降序\",\n            \"依參與人數升序\",\n            \"依參與人數降序\",\n        ];\n        const defaultCondition: GetEventWithCondition = {\n            requestPageNum: 1,\n            category: 0,\n            tag: \"\",\n            queryList: [],\n            nonCompleteEvent: \"No\",\n            sortBy: \"non_sort\",\n            eventPersonnel: \"\",\n        };\n        const allCondition: Ref<GetEventWithCondition> = ref(JSON.parse(JSON.stringify(defaultCondition)));\n\n        const sortConditionModel = ref(sortCondition[0]);\n        const options: string[] = [\"Google\", \"Facebook\", \"Twitter\", \"Apple\", \"Oracle\"];\n        const page: Ref<number> = ref(1);\n        const maxPages: Ref<number> = ref(1);\n\n        const allEvent: Ref<EventType[]> = ref([]);\n        const categoryList: Ref<categoryNode[]> = ref([]);\n        const selectedCategory: Ref<number> = ref(-1);\n\n        const stringOptions: Ref<string[]> = ref([]);\n\n        const handleSearchWord = (refKey: string) => {\n            console.log(refKey);\n            stringOptions.value.push(refKey);\n            allCondition.value.queryList = stringOptions.value;\n            getEventWithCondition();\n        };\n\n        const deleteSearchWord = (index: number) => {\n            stringOptions.value.splice(index, 1);\n            allCondition.value.queryList = stringOptions.value;\n            getEventWithCondition();\n        };\n\n        const getEventWithCondition = () => {\n            apiGetEventWithCondition({\n                category: allCondition.value.category,\n                tag: allCondition.value.tag,\n                queryList: allCondition.value.queryList,\n                sortBy: allCondition.value.sortBy,\n                rownumPerPage: 8,\n                requestPageNum: page.value,\n            }).then((response: any) => {\n                allEvent.value = response.data;\n                page.value = response.currentPageNum;\n                maxPages.value = response.maxPageNum;\n            });\n        };\n\n        const setDefaultAllCondition = () => {\n            allCondition.value.category = 0;\n            allCondition.value.tag = \"\";\n            selectedCategory.value = 0;\n            getEventWithCondition();\n        };\n\n        const getEventTree = () => {\n            apiGetEventCategory().then((response: any) => {\n                categoryList.value = response.data;\n            });\n        };\n\n        const setselectedCategory = (newID: number) => {\n            console.log(\"---click All----\");\n            allCondition.value.category = newID;\n            selectedCategory.value = newID;\n            getEventWithCondition();\n        };\n\n        const setArticles = () => {\n            allCondition.value.tag = \"S\";\n            getEventWithCondition();\n        };\n\n        const setSortCondition = (sortString: string) => {\n            let tempSortString = \"\";\n            switch (sortString) {\n                case \"依活動開始時間升序\":\n                    tempSortString = \"eventStDate_asc\";\n                    break;\n                case \"依活動開始時間降序\":\n                    tempSortString = \"eventStDate_desc\";\n                    break;\n                case \"依參與人數升序\":\n                    tempSortString = \"hot_asc\";\n                    break;\n                case \"依參與人數降序\":\n                    tempSortString = \"hot_desc\";\n                    break;\n                default:\n                    tempSortString = \"\";\n                    break;\n            }\n            allCondition.value.sortBy = tempSortString;\n            sortConditionModel.value = sortString;\n            getEventWithCondition();\n        };\n\n        watch(selectedCategory, (newVal, oldVal) => {\n            console.log(\"selected-watchsssssss\", newVal, oldVal);\n        });\n\n        watch(sortConditionModel, (newVal) => {\n            console.log(\"sortConditionModel-watchsssssss\", newVal);\n        });\n        watch(allCondition, (newVal) => {\n            console.log(\"allCondition-watchsssssss\", newVal);\n        });\n\n        watch(page, () => {\n            getEventWithCondition();\n        });\n\n        onMounted(() => {\n            getEventTree();\n            allCondition.value.sortBy = \"eventStDate_asc\";\n            getEventWithCondition();\n        });\n\n        return {\n            options,\n            page: page,\n            maxPages,\n            allEvent,\n            categoryList,\n            selectedCategory,\n            sortCondition,\n            sortConditionModel,\n            stringOptions,\n            setselectedCategory,\n            setSortCondition,\n            setDefaultAllCondition,\n            setArticles,\n            handleSearchWord,\n            deleteSearchWord,\n        };\n    },\n\n    components: {\n        CardList,\n        EventCategory,\n        ActivityFilter,\n    },\n};\n","import { render } from \"./ActivityView.vue?vue&type=template&id=873cf6ce\"\nimport script from \"./ActivityView.vue?vue&type=script&lang=ts\"\nexport * from \"./ActivityView.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script\nimport QPagination from 'quasar/src/components/pagination/QPagination.js';\nimport qInstall from \"../../node_modules/vue-cli-plugin-quasar/lib/runtime.auto-import.js\";\nqInstall(script, 'components', {QPagination});\n"],"sourceRoot":""}